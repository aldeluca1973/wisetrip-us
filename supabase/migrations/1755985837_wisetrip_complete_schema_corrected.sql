-- Migration: wisetrip_complete_schema_corrected
-- Created at: 1755985837

-- WiseTrip Complete Database Schema (Corrected)
-- All tables and features as per original specifications
-- Created: 2025-08-24
-- Database: mbrzrpstrzicaxqqfftk

-- Enable necessary extensions
create extension if not exists "uuid-ossp";

-- User profiles and preferences
create table if not exists public.user_preferences (
  user_id uuid primary key references auth.users(id) on delete cascade,
  dietary text[] default '{}',
  accessibility text[] default '{}', 
  pace text default 'moderate',
  interests text[] default '{}',
  locale text default 'en-US',
  home_airport text,
  preferred_transport text[] default '{}',
  budget_band text default 'mid-range',
  ai_profile jsonb default '{}'::jsonb,
  updated_at timestamptz default now()
);

-- AI-generated itineraries
create table if not exists public.itineraries (
  id uuid primary key default gen_random_uuid(),
  user_id uuid references auth.users(id) on delete cascade,
  title text not null,
  destination text not null,
  duration_days integer not null,
  budget_range text,
  travel_style text,
  itinerary_data jsonb not null,
  ai_prompt_used text,
  backup_activities jsonb default '[]'::jsonb,
  trust_score integer default 0,
  verified boolean default false,
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);

-- Inspirations for "Inspire Me" feature
create table if not exists public.inspirations (
  id uuid primary key default gen_random_uuid(),
  user_id uuid references auth.users(id) on delete cascade,
  title text not null,
  description text,
  destination text not null,
  theme text,
  season text,
  image_urls text[] default '{}',
  inspiration_data jsonb not null,
  tags text[] default '{}',
  likes_count integer default 0,
  created_at timestamptz default now()
);

-- Packing lists generated by AI
create table if not exists public.packing_lists (
  id uuid primary key default gen_random_uuid(),
  user_id uuid references auth.users(id) on delete cascade,
  itinerary_id uuid references public.itineraries(id) on delete cascade,
  title text not null,
  destination text not null,
  duration_days integer not null,
  weather_conditions text,
  activities text[] default '{}',
  items jsonb not null,
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);

-- Price locks for transparency
create table if not exists public.price_locks (
  id uuid primary key default gen_random_uuid(),
  user_id uuid references auth.users(id) on delete cascade,
  listing_id uuid,
  business_id uuid,
  original_price decimal(10,2) not null,
  locked_price decimal(10,2) not null,
  currency text default 'USD',
  lock_expires_at timestamptz not null,
  status text default 'active',
  booking_reference text,
  created_at timestamptz default now()
);

-- AI Concierge conversations
create table if not exists public.ai_conversations (
  id uuid primary key default gen_random_uuid(),
  user_id uuid references auth.users(id) on delete cascade,
  conversation_type text not null, -- 'concierge', 'itinerary', 'packing'
  messages jsonb not null default '[]'::jsonb,
  context_data jsonb default '{}'::jsonb,
  last_message_at timestamptz default now(),
  created_at timestamptz default now()
);

-- Businesses and service providers
create table if not exists public.businesses (
  id uuid primary key default gen_random_uuid(),
  owner_id uuid references auth.users(id) on delete cascade,
  name text not null,
  type text not null,
  address text,
  lat decimal(10, 8),
  lng decimal(11, 8),
  phone text,
  url text,
  description text,
  amenities text[] default '{}',
  verified boolean default false,
  trust_flags jsonb default '{}'::jsonb,
  created_at timestamptz default now()
);

-- Business listings
create table if not exists public.listings (
  id uuid primary key default gen_random_uuid(),
  business_id uuid references public.businesses(id) on delete cascade,
  title text not null,
  category text not null,
  description text,
  price decimal(10, 2),
  currency text default 'USD',
  media text[] default '{}',
  backup_options jsonb default '[]'::jsonb,
  active boolean default true,
  tags text[] default '{}',
  created_at timestamptz default now()
);

-- Special deals and offers
create table if not exists public.deals (
  id uuid primary key default gen_random_uuid(),
  business_id uuid references public.businesses(id) on delete cascade,
  listing_id uuid references public.listings(id) on delete cascade,
  title text not null,
  description text,
  discount_percent integer,
  discount_amount decimal(10, 2),
  starts_at timestamptz,
  ends_at timestamptz,
  terms text,
  active boolean default true
);

-- Tourist offices (B2B)
create table if not exists public.tourist_offices (
  id uuid primary key default gen_random_uuid(),
  owner_id uuid references auth.users(id) on delete cascade,
  name text not null,
  region text not null,
  contact_email text,
  plan text default 'basic',
  trust_verified boolean default false,
  created_at timestamptz default now()
);

-- Tourist office partnerships
create table if not exists public.tourist_partners (
  id uuid primary key default gen_random_uuid(),
  office_id uuid references public.tourist_offices(id) on delete cascade,
  business_id uuid references public.businesses(id) on delete cascade,
  status text default 'pending',
  verified_by_office boolean default false,
  created_at timestamptz default now()
);

-- Marketing campaigns
create table if not exists public.campaigns (
  id uuid primary key default gen_random_uuid(),
  office_id uuid references public.tourist_offices(id) on delete cascade,
  name text not null,
  budget_cents integer default 0,
  starts_at timestamptz,
  ends_at timestamptz,
  targeting jsonb default '{}'::jsonb,
  status text default 'draft',
  created_at timestamptz default now()
);

-- Sponsored placements
create table if not exists public.sponsored_placements (
  id uuid primary key default gen_random_uuid(),
  sponsor_type text not null, -- 'business' or 'tourist_office'
  sponsor_id uuid not null,
  area text not null, -- 'home', 'search', 'trip'
  starts_at timestamptz,
  ends_at timestamptz,
  budget_cents integer default 0,
  cap_type text, -- 'cpc', 'cpm', 'daily'
  cap_limit integer,
  status text default 'active'
);

-- Reviews and ratings
create table if not exists public.reviews (
  id uuid primary key default gen_random_uuid(),
  user_id uuid references auth.users(id) on delete cascade,
  listing_id uuid references public.listings(id) on delete cascade,
  rating integer not null check (rating >= 1 and rating <= 5),
  comment text,
  anonymous boolean default false,
  trust_verified boolean default false,
  created_at timestamptz default now()
);

-- Anonymous voting for features
create table if not exists public.voting_sessions (
  id uuid primary key default gen_random_uuid(),
  title text not null,
  description text,
  options jsonb not null,
  votes jsonb default '{}'::jsonb,
  anonymous boolean default true,
  expires_at timestamptz,
  active boolean default true,
  created_at timestamptz default now()
);

-- User votes (anonymous or identified)
create table if not exists public.user_votes (
  id uuid primary key default gen_random_uuid(),
  session_id uuid references public.voting_sessions(id) on delete cascade,
  user_id uuid references auth.users(id) on delete set null,
  option_selected text not null,
  anonymous boolean default true,
  ip_hash text, -- For anonymous duplicate prevention
  created_at timestamptz default now()
);

-- Offline exports
create table if not exists public.offline_exports (
  id uuid primary key default gen_random_uuid(),
  user_id uuid references auth.users(id) on delete cascade,
  itinerary_id uuid references public.itineraries(id) on delete cascade,
  export_type text not null, -- 'pdf', 'mobile', 'json'
  export_data jsonb,
  file_url text,
  expires_at timestamptz,
  downloaded boolean default false,
  created_at timestamptz default now()
);

-- AR locations (stub for future AR features)
create table if not exists public.ar_locations (
  id uuid primary key default gen_random_uuid(),
  listing_id uuid references public.listings(id) on delete cascade,
  lat decimal(10, 8) not null,
  lng decimal(11, 8) not null,
  ar_content jsonb default '{}'::jsonb,
  model_url text,
  active boolean default true,
  created_at timestamptz default now()
);

-- Backup activities for itineraries
create table if not exists public.backup_activities (
  id uuid primary key default gen_random_uuid(),
  itinerary_id uuid references public.itineraries(id) on delete cascade,
  original_activity_id text,
  backup_activity jsonb not null,
  reason text, -- weather, availability, etc.
  priority integer default 0,
  active boolean default true,
  created_at timestamptz default now()
);

-- Trust flags for verification
create table if not exists public.trust_flags (
  id uuid primary key default gen_random_uuid(),
  entity_type text not null, -- 'business', 'listing', 'review', 'user'
  entity_id uuid not null,
  flag_type text not null, -- 'verified', 'trusted', 'warning', 'fraud'
  flag_data jsonb default '{}'::jsonb,
  verified_by uuid references auth.users(id) on delete set null,
  verified_at timestamptz,
  active boolean default true,
  created_at timestamptz default now()
);

-- Payment records (using existing subscriptions table with integer id)
create table if not exists public.payments (
  id uuid primary key default gen_random_uuid(),
  user_id uuid references auth.users(id) on delete cascade,
  subscription_id integer references public.subscriptions(id) on delete set null,
  stripe_payment_intent_id text,
  amount_cents integer not null,
  currency text default 'usd',
  status text not null,
  created_at timestamptz default now()
);

-- Usage analytics
create table if not exists public.usage_analytics (
  id uuid primary key default gen_random_uuid(),
  user_id uuid references auth.users(id) on delete set null,
  event_type text not null,
  event_data jsonb default '{}'::jsonb,
  session_id text,
  ip_address inet,
  user_agent text,
  created_at timestamptz default now()
);

-- Notification templates
create table if not exists public.notification_templates (
  id uuid primary key default gen_random_uuid(),
  name text not null,
  type text not null, -- 'email', 'push', 'sms'
  subject text,
  template text not null,
  variables text[] default '{}',
  active boolean default true,
  created_at timestamptz default now()
);

-- Create indexes for performance
create index if not exists idx_user_preferences_user_id on public.user_preferences(user_id);
create index if not exists idx_itineraries_user_id on public.itineraries(user_id);
create index if not exists idx_itineraries_destination on public.itineraries(destination);
create index if not exists idx_inspirations_user_id on public.inspirations(user_id);
create index if not exists idx_inspirations_destination on public.inspirations(destination);
create index if not exists idx_packing_lists_user_id on public.packing_lists(user_id);
create index if not exists idx_price_locks_user_id on public.price_locks(user_id);
create index if not exists idx_ai_conversations_user_id on public.ai_conversations(user_id);
create index if not exists idx_businesses_location on public.businesses(lat, lng);
create index if not exists idx_listings_business_id on public.listings(business_id);
create index if not exists idx_reviews_listing_id on public.reviews(listing_id);
create index if not exists idx_voting_sessions_active on public.voting_sessions(active);
create index if not exists idx_trust_flags_entity on public.trust_flags(entity_type, entity_id);
create index if not exists idx_payments_user_id on public.payments(user_id);
create index if not exists idx_usage_analytics_event_type on public.usage_analytics(event_type);
create index if not exists idx_usage_analytics_user_id on public.usage_analytics(user_id);

-- Enable Row Level Security on all new tables
alter table public.user_preferences enable row level security;
alter table public.itineraries enable row level security;
alter table public.inspirations enable row level security;
alter table public.packing_lists enable row level security;
alter table public.price_locks enable row level security;
alter table public.ai_conversations enable row level security;
alter table public.businesses enable row level security;
alter table public.listings enable row level security;
alter table public.deals enable row level security;
alter table public.tourist_offices enable row level security;
alter table public.tourist_partners enable row level security;
alter table public.campaigns enable row level security;
alter table public.sponsored_placements enable row level security;
alter table public.reviews enable row level security;
alter table public.voting_sessions enable row level security;
alter table public.user_votes enable row level security;
alter table public.offline_exports enable row level security;
alter table public.ar_locations enable row level security;
alter table public.backup_activities enable row level security;
alter table public.trust_flags enable row level security;
alter table public.payments enable row level security;
alter table public.usage_analytics enable row level security;
alter table public.notification_templates enable row level security;

-- Create RLS policies
-- User preferences: users can only access their own
create policy "Users can manage own preferences" on public.user_preferences
  for all using (auth.uid() = user_id);

-- Itineraries: users can manage their own
create policy "Users can manage own itineraries" on public.itineraries
  for all using (auth.uid() = user_id);

-- Inspirations: public read, users can manage their own
create policy "Public can view inspirations" on public.inspirations
  for select using (true);

create policy "Users can manage own inspirations" on public.inspirations
  for insert with check (auth.uid() = user_id);

create policy "Users can update own inspirations" on public.inspirations
  for update using (auth.uid() = user_id);

create policy "Users can delete own inspirations" on public.inspirations
  for delete using (auth.uid() = user_id);

-- Packing lists: users can only access their own
create policy "Users can manage own packing lists" on public.packing_lists
  for all using (auth.uid() = user_id);

-- Price locks: users can only access their own
create policy "Users can manage own price locks" on public.price_locks
  for all using (auth.uid() = user_id);

-- AI conversations: users can only access their own
create policy "Users can manage own conversations" on public.ai_conversations
  for all using (auth.uid() = user_id);

-- Businesses: public read, owners can manage their own
create policy "Public can view businesses" on public.businesses
  for select using (true);

create policy "Business owners can manage their businesses" on public.businesses
  for all using (auth.uid() = owner_id);

-- Listings: public read, business owners can manage
create policy "Public can view active listings" on public.listings
  for select using (active = true);

create policy "Business owners can manage listings" on public.listings
  for all using (auth.uid() in (
    select owner_id from public.businesses where id = business_id
  ));

-- Deals: public read, business owners can manage
create policy "Public can view active deals" on public.deals
  for select using (active = true);

create policy "Business owners can manage deals" on public.deals
  for all using (auth.uid() in (
    select owner_id from public.businesses where id = business_id
  ));

-- Reviews: public read, users can manage their own
create policy "Public can view reviews" on public.reviews
  for select using (true);

create policy "Users can manage own reviews" on public.reviews
  for all using (auth.uid() = user_id);

-- Voting sessions: public read for active sessions
create policy "Public can view active voting sessions" on public.voting_sessions
  for select using (active = true);

-- User votes: users can manage their own (if not anonymous)
create policy "Users can manage own votes" on public.user_votes
  for all using (auth.uid() = user_id or user_id is null);

-- Offline exports: users can only access their own
create policy "Users can manage own exports" on public.offline_exports
  for all using (auth.uid() = user_id);

-- AR locations: public read
create policy "Public can view AR locations" on public.ar_locations
  for select using (active = true);

-- Trust flags: public read
create policy "Public can view trust flags" on public.trust_flags
  for select using (active = true);

-- Payments: users can only access their own
create policy "Users can manage own payments" on public.payments
  for all using (auth.uid() = user_id);

-- Analytics: service role can manage all, users can view their own
create policy "Service role can manage analytics" on public.usage_analytics
  for all using (auth.jwt()->>'role' = 'service_role');

-- Notification templates: service role can manage
create policy "Service role can manage notification templates" on public.notification_templates
  for all using (auth.jwt()->>'role' = 'service_role');

-- Grant necessary permissions
grant usage on schema public to postgres, anon, authenticated, service_role;
grant all on all tables in schema public to postgres, service_role;
grant select on all tables in schema public to anon;
grant select, insert, update, delete on all tables in schema public to authenticated;

-- Grant sequence permissions
grant all on all sequences in schema public to postgres, authenticated, service_role;

commit;;